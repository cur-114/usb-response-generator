#include <stdint.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <iomanip>
#include <cstdint>
#include <filesystem>

#define MAX_MAP_ENTRIES 128
#define MAX_DATA_BRAM 4096

std::string file_data_coe = "usb_packet_data.coe";
std::string file_map_coe = "usb_packet_map.coe";

#pragma pack(push, 1)
struct usb_packet_map_entry {
	uint8_t slot_id;
	uint8_t endpoint_id;
	uint8_t bm_request_type;
	uint8_t b_request;
	
	uint16_t w_value;
	uint16_t w_index;

	uint16_t data_length;
	uint16_t bram_address;
};

usb_packet_map_entry map_entries[MAX_MAP_ENTRIES];
#pragma pack(pop)

struct usb_packet_entry {
	usb_packet_map_entry *map_entry;
	void* data;
};

unsigned char data_80_00_0000_0000[] = { 0x0, 0x0 };

unsigned char data_80_06_0100_0000[] = { 0x12, 0x1, 0x0, 0x2, 0xef, 0x2, 0x1, 0x40, 0x4d, 0x53, 0x9, 0x21, 0x0, 0x21, 0x1, 0x2, 0x0, 0x1 };
unsigned char data_80_06_0200_0000[] = { 0x9, 0x2, 0xbb, 0x4, 0x5, 0x1, 0x0, 0x80, 0xfa, 0x8, 0xb, 0x0, 0x2, 0xe, 0x3, 0x0, 0x2, 0x9, 0x4, 0x0, 0x0, 0x0, 0xe, 0x1, 0x0, 0x2, 0xd, 0x24, 0x1, 0x0, 0x1, 0x33, 0x0, 0x0, 0x6c, 0xdc, 0x2, 0x1, 0x1, 0x12, 0x24, 0x2, 0x1, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0xb, 0x24, 0x5, 0x2, 0x1, 0x0, 0x0, 0x2, 0xf, 0x0, 0x0, 0x9, 0x24, 0x3, 0x3, 0x1, 0x1, 0x0, 0x2, 0x0, 0x9, 0x4, 0x1, 0x0, 0x0, 0xe, 0x2, 0x0, 0x0, 0xf, 0x24, 0x1, 0x2, 0xb1, 0x3, 0x83, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xb, 0x24, 0x6, 0x1, 0xb, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x24, 0x7, 0x1, 0x0, 0x80, 0x7, 0x38, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x48, 0x3f, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x15, 0x16, 0x5, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x2, 0x0, 0x40, 0x6, 0xb0, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x98, 0x3a, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x15, 0x16, 0x5, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x3, 0x0, 0x50, 0x5, 0x0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xe0, 0x1f, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x15, 0x16, 0x5, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x4, 0x0, 0x0, 0x5, 0x0, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x28, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x15, 0x16, 0x5, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x5, 0x0, 0x0, 0x5, 0xc0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x80, 0x25, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x15, 0x16, 0x5, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x6, 0x0, 0x0, 0x5, 0xd0, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x20, 0x1c, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x7, 0x0, 0x0, 0x4, 0x0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x18, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x8, 0x0, 0x20, 0x3, 0x58, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xa6, 0xe, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0x9, 0x0, 0xd0, 0x2, 0x40, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xa8, 0xc, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0xa, 0x0, 0xd0, 0x2, 0xe0, 0x1, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x8c, 0xa, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x2e, 0x24, 0x7, 0xb, 0x0, 0x80, 0x2, 0xe0, 0x1, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x60, 0x9, 0x0, 0xa, 0x8b, 0x2, 0x0, 0x5, 0xa, 0x8b, 0x2, 0x0, 0x40, 0xd, 0x3, 0x0, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x6, 0x24, 0xd, 0x1, 0x1, 0x4, 0x1b, 0x24, 0x4, 0x2, 0xb, 0x59, 0x55, 0x59, 0x32, 0x0, 0x0, 0x10, 0x0, 0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71, 0x10, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x24, 0x5, 0x1, 0x0, 0x80, 0x7, 0x38, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x48, 0x3f, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x1, 0x80, 0x84, 0x1e, 0x0, 0x1e, 0x24, 0x5, 0x2, 0x0, 0x40, 0x6, 0xb0, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x98, 0x3a, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x1, 0x80, 0x84, 0x1e, 0x0, 0x1e, 0x24, 0x5, 0x3, 0x0, 0x50, 0x5, 0x0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xe0, 0x1f, 0x0, 0xd0, 0x12, 0x13, 0x0, 0x1, 0xd0, 0x12, 0x13, 0x0, 0x1e, 0x24, 0x5, 0x4, 0x0, 0x0, 0x5, 0x0, 0x4, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x28, 0x0, 0xd0, 0x12, 0x13, 0x0, 0x1, 0xd0, 0x12, 0x13, 0x0, 0x1e, 0x24, 0x5, 0x5, 0x0, 0x0, 0x5, 0xc0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x80, 0x25, 0x0, 0xd0, 0x12, 0x13, 0x0, 0x1, 0xd0, 0x12, 0x13, 0x0, 0x1e, 0x24, 0x5, 0x6, 0x0, 0x0, 0x5, 0xd0, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x20, 0x1c, 0x0, 0x40, 0x42, 0xf, 0x0, 0x1, 0x40, 0x42, 0xf, 0x0, 0x1e, 0x24, 0x5, 0x7, 0x0, 0x0, 0x4, 0x0, 0x3, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x18, 0x0, 0x40, 0x42, 0xf, 0x0, 0x1, 0x40, 0x42, 0xf, 0x0, 0x26, 0x24, 0x5, 0x8, 0x0, 0x20, 0x3, 0x58, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xa6, 0xe, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x3, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x2a, 0x24, 0x5, 0x9, 0x0, 0xd0, 0x2, 0x40, 0x2, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0xa8, 0xc, 0x0, 0x80, 0x1a, 0x6, 0x0, 0x4, 0x80, 0x1a, 0x6, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x2a, 0x24, 0x5, 0xa, 0x0, 0xd0, 0x2, 0xe0, 0x1, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x8c, 0xa, 0x0, 0x15, 0x16, 0x5, 0x0, 0x4, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x2a, 0x24, 0x5, 0xb, 0x0, 0x80, 0x2, 0xe0, 0x1, 0x0, 0xb8, 0xb, 0x0, 0x0, 0x0, 0xb8, 0xb, 0x0, 0x60, 0x9, 0x0, 0x15, 0x16, 0x5, 0x0, 0x4, 0x15, 0x16, 0x5, 0x0, 0x20, 0xa1, 0x7, 0x0, 0x40, 0x42, 0xf, 0x0, 0x80, 0x84, 0x1e, 0x0, 0x6, 0x24, 0xd, 0x1, 0x1, 0x4, 0x9, 0x4, 0x1, 0x1, 0x1, 0xe, 0x2, 0x0, 0x0, 0x7, 0x5, 0x83, 0x5, 0x20, 0x3, 0x1, 0x9, 0x4, 0x1, 0x2, 0x1, 0xe, 0x2, 0x0, 0x0, 0x7, 0x5, 0x83, 0x5, 0x0, 0xc, 0x1, 0x9, 0x4, 0x1, 0x3, 0x1, 0xe, 0x2, 0x0, 0x0, 0x7, 0x5, 0x83, 0x5, 0x0, 0x14, 0x1, 0x8, 0xb, 0x2, 0x2, 0x1, 0x1, 0x0, 0x4, 0x9, 0x4, 0x2, 0x0, 0x0, 0x1, 0x1, 0x0, 0x4, 0x9, 0x24, 0x1, 0x0, 0x1, 0x26, 0x0, 0x1, 0x3, 0xc, 0x24, 0x2, 0x1, 0x2, 0x6, 0x0, 0x2, 0x3, 0x0, 0x0, 0x0, 0x8, 0x24, 0x6, 0x2, 0x1, 0x1, 0x1, 0x0, 0x9, 0x24, 0x3, 0x3, 0x1, 0x1, 0x0, 0x2, 0x0, 0x9, 0x4, 0x3, 0x0, 0x0, 0x1, 0x2, 0x0, 0x4, 0x9, 0x4, 0x3, 0x1, 0x1, 0x1, 0x2, 0x0, 0x4, 0x7, 0x24, 0x1, 0x3, 0x0, 0x1, 0x0, 0xb, 0x24, 0x2, 0x1, 0x1, 0x2, 0x10, 0x1, 0x0, 0x77, 0x1, 0x9, 0x5, 0x82, 0x5, 0x0, 0x1, 0x4, 0x0, 0x0, 0x7, 0x25, 0x1, 0x0, 0x0, 0x0, 0x0, 0x9, 0x4, 0x4, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x9, 0x21, 0x10, 0x1, 0x21, 0x1, 0x22, 0x17, 0x0, 0x7, 0x5, 0x84, 0x3, 0x4, 0x0, 0x10 };
unsigned char data_80_06_0300_0000[] = { 0x4, 0x3, 0x9, 0x4 };
unsigned char data_80_06_0301_0409[] = { 0x1a, 0x3, 0x4d, 0x0, 0x41, 0x0, 0x43, 0x0, 0x52, 0x0, 0x4f, 0x0, 0x53, 0x0, 0x49, 0x0, 0x4c, 0x0, 0x49, 0x0, 0x43, 0x0, 0x4f, 0x0, 0x4e, 0x0 };
unsigned char data_80_06_0302_0409[] = { 0x20, 0x3, 0x55, 0x0, 0x53, 0x0, 0x42, 0x0, 0x33, 0x0, 0x2e, 0x0, 0x20, 0x0, 0x30, 0x0, 0x20, 0x0, 0x63, 0x0, 0x61, 0x0, 0x70, 0x0, 0x74, 0x0, 0x75, 0x0, 0x72, 0x0, 0x65, 0x0 };
unsigned char data_80_06_0304_0409[] = { 0x55, 0x0, 0x53, 0x0, 0x42, 0x0, 0x33, 0x0, 0x2e, 0x0, 0x20, 0x0, 0x30, 0x0, 0x20, 0x0, 0x63, 0x0, 0x61, 0x0, 0x70, 0x0, 0x74, 0x0, 0x75, 0x0, 0x72, 0x0, 0x65, 0x0 };
unsigned char data_81_06_2200_0004[] = { 0x6, 0x0, 0xff, 0x9, 0x1, 0xa1, 0x1, 0x15, 0x0, 0x26, 0xff, 0x0, 0x19, 0x1, 0x29, 0x2, 0x75, 0x8, 0x95, 0x8, 0xb1, 0x2, 0xc0 };

unsigned char data_A1_86_0200_0200[] = { 0x7 };
unsigned char data_A1_86_0300_0200[] = { 0x7 };
unsigned char data_A1_86_0600_0200[] = { 0x7 };
unsigned char data_A1_86_0700_0200[] = { 0x7 };

unsigned char data_A1_82_0200_0200[] = { 0x80, 0xff };
unsigned char data_A1_82_0300_0200[] = { 0x0, 0x0 };
unsigned char data_A1_82_0600_0200[] = { 0x80, 0xff };
unsigned char data_A1_82_0700_0200[] = { 0x0, 0x0 };

unsigned char data_A1_83_0200_0200[] = { 0x7f, 0x0 };
unsigned char data_A1_83_0300_0200[] = { 0xff, 0x0 };
unsigned char data_A1_83_0600_0200[] = { 0x7f, 0x0 };
unsigned char data_A1_83_0700_0200[] = { 0xff, 0x0 };

unsigned char data_A1_84_0200_0200[] = { 0x1, 0x0 };
unsigned char data_A1_84_0300_0200[] = { 0x1, 0x0 };
unsigned char data_A1_84_0600_0200[] = { 0x1, 0x0 };
unsigned char data_A1_84_0700_0200[] = { 0x1, 0x0 };

unsigned char data_A1_87_0200_0200[] = { 0xf5, 0xff };
unsigned char data_A1_87_0300_0200[] = { 0x94, 0x0 };
unsigned char data_A1_87_0600_0200[] = { 0x0, 0x0 };
unsigned char data_A1_87_0700_0200[] = { 0xb4, 0x0 };

unsigned char data_A1_81_0100_0202[] = { 0x0 };

std::vector<usb_packet_entry> entries;
std::vector<uint32_t> data;

int map_entry_index = 0;

static void new_entry(
	uint8_t slot_id,
	uint8_t endpoint_id,
	uint8_t bm_request_type,
	uint8_t b_request,
	uint16_t w_value,
	uint16_t w_index,
	uint16_t data_length,
	uint16_t bram_address,
	void* pointer
) {
	usb_packet_map_entry map_entry = {};
	map_entry.slot_id = slot_id;
	map_entry.endpoint_id = endpoint_id;
	map_entry.bm_request_type = bm_request_type;
	map_entry.b_request = b_request;
	map_entry.w_value = w_value;
	map_entry.w_index = w_index;
	map_entry.data_length = data_length;
	map_entry.bram_address = bram_address;
	map_entries[map_entry_index] = map_entry;
	usb_packet_entry entry = {};
	entry.map_entry = &map_entries[map_entry_index];
	entry.data = pointer;
	entries.push_back(entry);
	map_entry_index++;
}

void load_entries() {
	new_entry(1, 1, 0x00, 0x00, 0x0000, 0x0000, sizeof(data_80_00_0000_0000), 0, data_80_00_0000_0000);

	new_entry(1, 1, 0x80, 0x06, 0x0100, 0x0000, sizeof(data_80_06_0100_0000), 0, data_80_06_0100_0000);
	new_entry(1, 1, 0x80, 0x06, 0x0200, 0x0000, sizeof(data_80_06_0200_0000), 0, data_80_06_0200_0000);
	new_entry(1, 1, 0x80, 0x06, 0x0300, 0x0000, sizeof(data_80_06_0300_0000), 0, data_80_06_0300_0000);
	new_entry(1, 1, 0x80, 0x06, 0x0301, 0x0409, sizeof(data_80_06_0301_0409), 0, data_80_06_0301_0409);
	new_entry(1, 1, 0x80, 0x06, 0x0302, 0x0409, sizeof(data_80_06_0302_0409), 0, data_80_06_0302_0409);
	new_entry(1, 1, 0x80, 0x06, 0x0304, 0x0409, sizeof(data_80_06_0304_0409), 0, data_80_06_0304_0409);
	new_entry(1, 1, 0x80, 0x06, 0x2200, 0x0004, sizeof(data_81_06_2200_0004), 0, data_81_06_2200_0004);

	new_entry(1, 1, 0xA1, 0x86, 0x0200, 0x0200, sizeof(data_A1_86_0200_0200), 0, data_A1_86_0200_0200);
	new_entry(1, 1, 0xA1, 0x86, 0x0300, 0x0200, sizeof(data_A1_86_0300_0200), 0, data_A1_86_0300_0200);
	new_entry(1, 1, 0xA1, 0x86, 0x0600, 0x0200, sizeof(data_A1_86_0600_0200), 0, data_A1_86_0600_0200);
	new_entry(1, 1, 0xA1, 0x86, 0x0700, 0x0200, sizeof(data_A1_86_0700_0200), 0, data_A1_86_0700_0200);

	new_entry(1, 1, 0xA1, 0x82, 0x0200, 0x0200, sizeof(data_A1_82_0200_0200), 0, data_A1_82_0200_0200);
	new_entry(1, 1, 0xA1, 0x82, 0x0300, 0x0200, sizeof(data_A1_82_0300_0200), 0, data_A1_82_0300_0200);
	new_entry(1, 1, 0xA1, 0x82, 0x0600, 0x0200, sizeof(data_A1_82_0600_0200), 0, data_A1_82_0600_0200);
	new_entry(1, 1, 0xA1, 0x82, 0x0700, 0x0200, sizeof(data_A1_82_0700_0200), 0, data_A1_82_0700_0200);

	new_entry(1, 1, 0xA1, 0x83, 0x0200, 0x0200, sizeof(data_A1_83_0200_0200), 0, data_A1_83_0200_0200);
	new_entry(1, 1, 0xA1, 0x83, 0x0300, 0x0200, sizeof(data_A1_83_0300_0200), 0, data_A1_83_0300_0200);
	new_entry(1, 1, 0xA1, 0x83, 0x0600, 0x0200, sizeof(data_A1_83_0600_0200), 0, data_A1_83_0600_0200);
	new_entry(1, 1, 0xA1, 0x83, 0x0700, 0x0200, sizeof(data_A1_83_0700_0200), 0, data_A1_83_0700_0200);

	new_entry(1, 1, 0xA1, 0x84, 0x0200, 0x0200, sizeof(data_A1_84_0200_0200), 0, data_A1_84_0200_0200);
	new_entry(1, 1, 0xA1, 0x84, 0x0300, 0x0200, sizeof(data_A1_84_0300_0200), 0, data_A1_84_0300_0200);
	new_entry(1, 1, 0xA1, 0x84, 0x0600, 0x0200, sizeof(data_A1_84_0600_0200), 0, data_A1_84_0600_0200);
	new_entry(1, 1, 0xA1, 0x84, 0x0700, 0x0200, sizeof(data_A1_84_0700_0200), 0, data_A1_84_0700_0200);

	new_entry(1, 1, 0xA1, 0x87, 0x0200, 0x0200, sizeof(data_A1_87_0200_0200), 0, data_A1_87_0200_0200);
	new_entry(1, 1, 0xA1, 0x87, 0x0300, 0x0200, sizeof(data_A1_87_0300_0200), 0, data_A1_87_0300_0200);
	new_entry(1, 1, 0xA1, 0x87, 0x0600, 0x0200, sizeof(data_A1_87_0600_0200), 0, data_A1_87_0600_0200);
	new_entry(1, 1, 0xA1, 0x87, 0x0700, 0x0200, sizeof(data_A1_87_0700_0200), 0, data_A1_87_0700_0200);

	new_entry(1, 1, 0xA1, 0x81, 0x0100, 0x0202, sizeof(data_A1_81_0100_0202), 0, data_A1_81_0100_0202);

	new_entry(1, 1, 0x01, 0x0B, 0x0000, 0x0001, 0, 0, 0);
	new_entry(1, 1, 0x01, 0x0B, 0x0000, 0x0003, 0, 0, 0);

	new_entry(1, 1, 0x21, 0x0A, 0x0000, 0x0004, 0, 0, 0);

	new_entry(1, 1, 0x00, 0x09, 0x0001, 0x0000, 0, 0, 0);
}

void write_data_coe() {
	std::ofstream ofs(file_data_coe, std::ios::out | std::ios::trunc);
	if (!ofs)
		throw std::ios_base::failure("cannot open " + file_data_coe);

	ofs << "memory_initialization_radix = 16;" << std::endl;
	ofs << "memory_initialization_vector = " << std::endl;

	ofs << std::uppercase << std::hex << std::setfill('0');

	for (int i = 0; i < MAX_DATA_BRAM / 16; i++) {
		uint32_t data_0 = 0;
		uint32_t data_1 = 0;
		uint32_t data_2 = 0;
		uint32_t data_3 = 0;
		if (i * 4 < data.size()) {
			data_0 = data[i * 4];
			data_1 = data[i * 4 + 1];
			data_2 = data[i * 4 + 2];
			data_3 = data[i * 4 + 3];
		}
		ofs << std::setw(8) << data_3;
		ofs << std::setw(8) << data_2;
		ofs << std::setw(8) << data_1;
		ofs << std::setw(8) << data_0 << ',';
		ofs << '\n';
	}
	ofs << ";";
	ofs.flush();
}

void write_map_coe() {
	std::ofstream ofs(file_map_coe, std::ios::out | std::ios::trunc);
	if (!ofs)
		throw std::ios_base::failure("cannot open " + file_map_coe);

	ofs << "memory_initialization_radix = 16;" << std::endl;
	ofs << "memory_initialization_vector = " << std::endl;

	ofs << std::uppercase << std::hex << std::setfill('0');

	for (int i = 0; i < sizeof(map_entries) / 12; i++) {
		uint32_t* data_0 = ((uint32_t*)map_entries) + i * 3;
		uint32_t* data_1 = data_0 + 1;
		uint32_t* data_2 = data_0 + 2;

		ofs << std::setw(8) << *data_2;
		ofs << std::setw(8) << *data_1;
		ofs << std::setw(8) << *data_0 << ',';
		ofs << '\n';
	}
	ofs << ";";
	ofs.flush();
}

int main()
{
	load_entries();

	uint16_t index = 0;

	void* buffer = malloc(0x10);
	uint32_t* data_1 = (uint32_t*)buffer;
	uint32_t* data_2 = data_1 + 1;
	uint32_t* data_3 = data_1 + 2;
	uint32_t* data_4 = data_1 + 3;
	if (!buffer) {
		printf("Failed to allocate buffer!\n");
		return -1;
	}

	for (usb_packet_entry& entry : entries) {
		if (entry.map_entry->data_length == 0)
			continue;

		uint16_t data_count = entry.map_entry->data_length >> 4;
		uint16_t data_left = entry.map_entry->data_length & 0xF;
		uint16_t data_size = data_count + (data_left != 0 ? 1 : 0);

		printf("%03d: data length: %d, size: %d\n", index, entry.map_entry->data_length, data_size);

		for (uint16_t i = 0; i < data_size; i++) {
			memset(buffer, 0, 0x10);
			size_t copy_length = 0x10;
			if (copy_length > entry.map_entry->data_length - i * 0x10)
				copy_length = entry.map_entry->data_length - i * 0x10;
			memcpy(buffer, (void*)((uint64_t)entry.data + i * 0x10), copy_length);
			//printf("%08X %08X %08X %08X\n", *data_1, *data_2, *data_3, *data_4);
			data.push_back(*data_1);
			data.push_back(*data_2);
			data.push_back(*data_3);
			data.push_back(*data_4);
		}

		entry.map_entry->bram_address = index;

		index += data_size;
	}

	write_data_coe();
	write_map_coe();
}